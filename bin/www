#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

if (process.env.ENV !== 'DEV') {
  var https_port = process.env.PORT_HTTPS || 8443;

  var privateKey = fs.readFileSync('privatekey.pem', 'utf8');
  var certificate = fs.readFileSync('server.crt', 'utf8');

  var options = {
    key: privateKey,
    cert: certificate
  };

  var server = https.createServer(options, app).listen(https_port, function () {
    console.log('HTTPS server running on port ' + https_port);
  });

  server.on('error', onError);
  server.on('listening', onListening);

  // Redirect from HTTP port to HTTPS
  http.createServer(function (req, res) {
    res.writeHead(301, { 'Location': 'https://' + req.headers['host'].replace(port, https_port) + req.url });
    res.end();
  }).listen(port);

} else {
  var server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
